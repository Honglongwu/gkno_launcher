{
  "description" : "Build Mosaik reference files and align fastq files using Mosaik (additional processing steps included).",

  "tools" : {
    "build-tangram-reference" : {
      "tool" : "tangram-index"
    }
    "merge-fasta" : {
      "tool" : "concatenate-files"
    }
    "index-fasta" : {
      "tool" : "samtools-index-fasta"
    }
    "create-sequence-dictionary" : {
      "tool" : "picard-create-sequence-dictionary"
    }
    "build-reference" : {
      "tool" : "mosaik-build-reference"
    }
    "build-jump-database" : {
      "tool" : "mosaik-jump"
    }
    "generate-mosaik-parameters" : {
      "tool" : "premo"
    }
    "build-read-archive" : {
      "tool" : "mosaik-build-fastq"
    }
    "align" : {
      "tool" : "mosaik-aligner"
    }
    "sort-primary-bam" : {
      "tool" : "bamtools-sort"
    }
    "sort-multiple-bam" : {
      "tool" : "bamtools-sort"
    }
    "index-primary-bam" : {
      "tool" : "bamtools-index"
    }
    "generate-bam-list" : {
      "tool" : "generate-file-list"
    }
    "mark-duplicates" : {
      "tool" : "picard-mark-duplicates"
    }
    "index-final-bam" : {
      "tool" : "bamtools-index"
    }
    "scan-bam-files" : {
      "tool" : "tangram-scan"
    }
    "detect-mei" : {
      "tool" : "tangram-detect"
    }
  },

  "nodes" : [
    {
      "ID" : "reference fasta",
      "description" : "The reference fasta file.",
      "long form argument" : "--fasta-reference",
      "short form argument" : "-f",
      "tasks" : {
        "merge-fasta" : "--in",
        "build-tangram-reference" : "--fasta-reference"
      }
    },
    {
      "ID" : "moblist reference",
      "description" : "The mobile element reference sequences.",
      "long form argument" : "--special-reference",
      "short form argument" : "-sp",
      "tasks" : {
        "merge-fasta" : "--in",
        "build-tangram-reference" : "--special-reference"
      }
    },
    {
      "ID" : "Tangram reference",
      "description" : "The binary reference for use with Tangram.",
      "long form argument" : "--tangram-reference",
      "short form argument" : "-tr",
      "tasks" : {
        "build-tangram-reference" : "--tangram-reference",
        "detect-mei" : "--tangram-reference"
      }
    },
    {
      "ID" : "merged fasta",
      "description" : "The fasta reference including the mobile element sequences.",
      "long form argument" : "--merged-reference",
      "short form argument" : "-mr",
      "tasks" : {
        "merge-fasta" : "--out"
      }
    },
    {
      "ID" : "hash size",
      "description" : "The hash size for breaking up the read and reference.",
      "long form argument" : "--hash-size",
      "short form argument" : "-hs",
      "tasks" : {
        "build-jump-database" : "--hash-size"
      }
    },
    {
      "ID" : "fastq first mate",
      "description" : "The fastq file for the first mate in the pair.",
      "long form argument" : "--fastq",
      "short form argument" : "-q",
      "tasks" : {
        "generate-mosaik-parameters" : "--fastq"
      }
    },
    {
      "ID" : "fastq second mate",
      "description" : "The fastq file for the second mate in the pair.",
      "long form argument" : "--fastq2",
      "short form argument" : "-q2",
      "required" : true,
      "tasks" : {
        "generate-mosaik-parameters" : "--fastq2"
      }
    },
    {
      "ID" : "batch",
      "description" : "Number of pairs to align per batch [1000].",
      "long form argument" : "--reads-per-batch",
      "short form argument" : "-rb",
      "tasks" : {
        "generate-mosaik-parameters" : "--reads-per-batch"
      }
    },
    {
      "ID" : "sequencing technology",
      "description" : "Sequencing technology: '454', 'helicos', 'illumina', 'illumina_long', 'sanger' or 'solid'.",
      "long form argument" : "--sequencing-technology",
      "short form argument" : "-st",
      "tasks" : {
        "generate-mosaik-parameters" : "--sequencing-technology",
        "build-read-archive" : "--sequencing-technology"
      }
    },
    {
      "ID" : "single end neural net",
      "description" : "Neural network file for Mosaik mapping quality scores (single end).",
      "long form argument" : "--ann-se",
      "short form argument" : "-as",
      "tasks" : {
        "generate-mosaik-parameters" : "--ann-single-end",
        "align" : "--ann-single-end"
      }
    },
    {
      "ID" : "paired end neural net",
      "description" : "Neural network file for Mosaik mapping quality scores (paired end).",
      "long form argument" : "--ann-pe",
      "short form argument" : "-ap",
      "tasks" : {
        "generate-mosaik-parameters" : "--ann-paired-end",
        "align" : "--ann-paired-end"
      }
    },
    {
      "ID" : "fragment length",
      "description" : "Median fragment length.",
      "long form argument" : "--median-fragment-length",
      "short form argument" : "-mfl",
      "tasks" : {
        "build-read-archive" : "--median-fragment-length"
      }
    },
    {
      "ID" : "read archive",
      "description" : "The output read archive.",
      "long form argument" : "--read-archive",
      "short form argument" : "-a",
      "tasks" : {
        "build-read-archive" : "--read-archive",
        "align" : "--read-archive"
      },
      "delete files" : true
    },
    {
      "ID" : "special references",
      "description" : "Specifies the prefixes of 'special' reference sequences.",
      "long form argument" : "--special-reference-prefix",
      "short form argument" : "-s",
      "tasks" : {
        "align" : "--special-reference-prefix"
      }
    },
    {
      "ID" : "special reference hashes",
      "description" : "Specifies the maximum number of hashes for the special reference sequences.",
      "long form argument" : "--special-reference-hashes",
      "short form argument" : "-sh",
      "tasks" : {
        "align" : "--special-reference-hashes"
      }
    },
    {
      "ID" : "threads",
      "description" : "Specifies the number of threads to use for the aligner.",
      "long form argument" : "--mosaik-processors",
	      "short form argument" : "-mp",
      "tasks" : {
        "align" : "--processors"
      }
    },
    {
      "ID" : "candidates",
      "description" : "Specifies the minimum length of an alignment candidate.",
      "long form argument" : "--alignment-candidate-threshold",
      "short form argument" : "-act",
      "tasks" : {
        "align" : "--alignment-candidate-threshold"
      }
    },
    {
      "ID" : "max hash",
      "description" : "Specifies the maximum number of positions stored for each hash.",
      "long form argument" : "--maximum-hashes-per-seed",
      "short form argument" : "-mhp",
      "tasks" : {
        "align" : "--maximum-hashes-per-seed"
      }
    },
    {
      "ID" : "tangram directory",
      "description" : "The directory containing the histogram and library files.",
      "long form argument" : "--output-directory",
      "short form argument" : "-d",
      "tasks" : {
        "scan-bam-files" : "--output-directory"
      }
    },
    {
      "ID" : "min fragments",
      "description" : "The minimum number of normal fragments in a library [10000].",
      "long form argument" : "--minimum-fragments",
      "short form argument" : "-mf",
      "tasks" : {
        "scan-bam-files" : "--minimum-fragments"
      }
    },
    {
      "ID" : "bam-list",
      "description" : "A file containing a list of all BAM files to be processed by TANGRAM.",
      "long form argument" : "--in-list",
      "short form argument" : "-il",
      "tasks" : {
        "detect-mei" : "--in-list"
      }
    },
    {
      "ID" : "library",
      "description" : "The file containing information on the read libraries.",
      "long form argument" : "--library",
      "short form argument" : "-l",
      "tasks" : {
        "detect-mei" : "--library"
      }
    },
    {
      "ID" : "histogram",
      "description" : "The file containing fragment length information.",
      "long form argument" : "--histogram",
      "short form argument" : "-ht",
      "tasks" : {
        "detect-mei" : "--histogram"
      }
    },
    {
      "ID" : "call region",
      "description" : "The region in which to search for variants.",
      "long form argument" : "--region",
      "short form argument" : "-rg",
      "tasks" : {
        "detect-mei" : "--region"
      }
    },
    {
      "ID" : "calls",
      "description" : "The output file (including path) [stdout].",
      "long form argument" : "--vcf",
      "short form argument" : "-v",
      "tasks" : {
        "detect-mei" : "--vcf"
      }
    },
    {
      "ID" : "tangram threads",
      "description" : "The number of threads to use when detecting variants.",
      "long form argument" : "--tangram-processors",
      "short form argument" : "-tp",
      "tasks" : {
        "detect-mei" : "--processors"
      }
    },
    {
      "ID" : "index fasta",
      "description" : "Linking arguments.",
      "tasks" : {
        "merge-fasta" : "--out",
        "index-fasta" : "--in",
        "create-sequence-dictionary" : "--fasta-reference"
      }
    },
    {
      "ID" : "fasta dictionary",
      "description" : "Linking arguments.",
      "tasks" : {
        "merge-fasta" : "--out",
        "index-fasta" : "--in"
      }
    },


  "linkage" : {
    "create-sequence-dictionary" : {
      "REFERENCE" : {
        "link to this task" : "merge-fasta",
        "link to this argument" : "--out"
      }
    },
    "build-reference" : {
      "-fr" : {
        "link to this task" : "merge-fasta",
        "link to this argument" : "--out"
      }
    },
    "build-jump-database" : {
      "-ia" : {
        "link to this task" : "build-reference",
        "link to this argument" : "-oa"
      }
    },
    "generate-mosaik-parameters" : {
      "-hs" : {
        "link to this task" : "build-jump-database",
        "link to this argument" : "-hs"
      },
      "-ref" : {
        "link to this task" : "build-reference",
        "link to this argument" : "-oa"
      },
      "-jmp" : {
        "link to this task" : "build-jump-database",
        "link to this argument" : "-out"
      }
    },
    "build-read-archive" : {
      "-q" : {
        "link to this task" : "generate-mosaik-parameters",
        "link to this argument" : "-fq1"
      },
      "-q2" : {
        "link to this task" : "generate-mosaik-parameters",
        "link to this argument" : "-fq2"
      },
      "-st" : {
        "link to this task" : "generate-mosaik-parameters",
        "link to this argument" : "-st"
      },
      "json parameters" : {
        "link to this task" : "generate-mosaik-parameters",
        "link to this argument" : "-out",
        "json block" : "MosaikBuild"
      }
    },
    "align" : {
      "-in" : {
        "link to this task" : "build-read-archive",
        "link to this argument" : "-out"
      },
      "-ia" : {
        "link to this task" : "generate-mosaik-parameters",
        "link to this argument" : "-ref"
      },
      "-hs" : {
        "link to this task" : "generate-mosaik-parameters",
        "link to this argument" : "-hs"
      },
      "-j" : {
        "link to this task" : "generate-mosaik-parameters",
        "link to this argument" : "-jmp"
      },
      "-annse" : {
        "link to this task" : "generate-mosaik-parameters",
        "link to this argument" : "-annse"
      },
      "-annpe" : {
        "link to this task" : "generate-mosaik-parameters",
        "link to this argument" : "-annpe"
      },
      "json parameters" : {
        "link to this task" : "generate-mosaik-parameters",
        "link to this argument" : "-out",
        "json block" : "MosaikAligner"
      }
    },
    "sort-primary-bam" : {
      "-in" : {
        "link to this task" : "align",
        "link to this argument" : "-out",
        "extension" : ".bam"
      }
    },
    "sort-multiple-bam" : {
      "-in" : {
        "link to this task" : "align",
        "link to this argument" : "-out",
        "extension" : ".multiple.bam"
      },
      "-out" : {
        "link to this task" : "align",
        "link to this argument" : "-out",
        "extension" : ".multiple.sorted.bam"
      }
    },
    "index-primary-bam" : {
      "-in" : {
        "link to this task" : "sort-primary-bam",
        "link to this argument" : "-out"
      }
    },
    "mark-duplicates" : {
      "INPUT" : {
        "link to this task" : "sort-primary-bam",
        "link to this argument" : "-out"
      }
    },
    "index-final-bam" : {
      "-in" : {
        "link to this task" : "mark-duplicates",
        "link to this argument" : "OUTPUT"
      }
    },
    "generate-bam-list" : {
      "--in" : {
        "link to this task" : "mark-duplicates",
        "link to this argument" : "OUTPUT"
      }
    },
    "scan-bam-files" : {
      "-in" : {
        "link to this task" : "generate-bam-list",
        "link to this argument" : "--out"
      }
    },
    "detect-mei" : {
      "-in" : {
        "link to this task" : "generate-bam-list",
        "link to this argument" : "--out"
      },
      "-ref" : {
        "link to this task" : "build-tangram-reference",
        "link to this argument" : "-out"
      }
    }
  },

  "additional dependencies" : {
    "detect-mei" : {
      "additional files from task" : [
        "index-final-bam"
      ]
    }
  },

  "delete files" : {
    "build-read-archive" : {
      "-out" : {
        "delete after task" : "align"
      }
    },
    "align" : {
      "-out" : {
        "output extension" : [
          ".bam",
          ".multiple.bam"
        ],
        "delete after task" : [
          "sort-primary-bam",
          "sort-multiple-bam"
        ]
      }
    }
  },
  "instances" : {
    "default" : {
      "description" : "Default instance requires user to input all input filenames.",
      "--output-reference" : "tangram-reference.dat",
      "--merged-reference" : "merged-reference.fa",
      "--ann-se" : "$(RESOURCES)/tutorial/current/se.100.005.ann",
      "--ann-pe" : "$(RESOURCES)/tutorial/current/pe.100.01.ann",
      "--tangram-directory" : "tangram-files",
      "--tangram-output" : "tangram-calls"
    },
    "test" : {
      "description" : "Test instance for the test harness.",
      "--reference" : "$(RESOURCES)/tutorial/current/test_genome.fa",
      "--moblist-reference" : "$(RESOURCES)/tutorial/current/mobile_element_sequences.fa",
      "--output-reference" : "tangram-reference",
      "--merged-reference" : "reference_moblist.fa",
      "--ann-se" : "$(RESOURCES)/tutorial/current/se.100.005.ann",
      "--ann-pe" : "$(RESOURCES)/tutorial/current/pe.100.01.ann",
      "--hash-size" : "10",
      "--sequencing-technology" : "illumina",
      "--special-references" : "moblist",
      "--special-reference-hashes" : "50",
      "--internal-loop" : "$(RESOURCES)/tutorial/current/tangram-align.json",
      "--number-jobs" : "2",
      "--tangram-directory" : "tangram-files",
      "--minimum-fragments" : "0",
      "--tangram-region" : "20:1-999999",
      "--tangram-output" : "tangram-calls"
    },
    "tutorial" : {
      "description" : "Tutorial instance for running TANGRAM.",
      "--reference" : "$(RESOURCES)/tutorial/current/test_genome.fa",
      "--moblist-reference" : "$(RESOURCES)/tutorial/current/mobile_element_sequences.fa",
      "--output-reference" : "tangram-reference",
      "--merged-reference" : "reference_moblist.fa",
      "--ann-se" : "$(RESOURCES)/tutorial/current/se.100.005.ann",
      "--ann-pe" : "$(RESOURCES)/tutorial/current/pe.100.01.ann",
      "--hash-size" : "10",
      "--sequencing-technology" : "illumina",
      "--special-references" : "moblist",
      "--special-reference-hashes" : "50",
      "--internal-loop" : "$(RESOURCES)/tutorial/current/tangram-align.json",
      "--number-jobs" : "2",
      "--tangram-directory" : "tangram-files",
      "--minimum-fragments" : "0",
      "--tangram-region" : "20:1-999999",
      "--tangram-output" : "tangram-calls"
    }
  }
}
