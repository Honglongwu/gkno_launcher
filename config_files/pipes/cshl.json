{
  "description" : "Build Mosaik reference files and align fastq files using Mosaik (additional processing steps included).",
  "workflow" : [
    "build-reference",
    "build-jump-database",
    "index-fasta",
    "build-read-archive",
    "align",
    "sort-primary-bam",
    "sort-multiple-bam",
    "mark-duplicates",
    "index-primary-bam",
    "variant-call",
    "variant-call-duplicates",
    "intersect",
    "unique-variants"
  ],
  "tools" : {
    "build-reference" : "mosaik-build-reference",
    "build-jump-database" : "mosaik-jump",
    "index-fasta" : "samtools-index-fasta",
    "build-read-archive" : "mosaik-build-fastq",
    "align" : "mosaik-aligner",
    "sort-primary-bam" : "bamtools-sort",
    "sort-multiple-bam" : "bamtools-sort",
    "mark-duplicates" : "dedup",
    "index-primary-bam" : "bamtools-index",
    "variant-call" : "freebayes",
    "variant-call-duplicates" : "freebayes",
    "intersect" : "vcflib-intersect",
    "unique-variants" : "vcflib-intersect"
  },
  "construct filenames" : {
    "build-reference" : {
      "-oa" : {
        "filename root" : "from argument",
        "get root from task" : "build-reference",
        "get root from argument" : "-fr",
        "remove input extension" : true
      }
    },
    "build-jump-database" : {
      "-out" : {
        "filename root" : "from argument",
        "get root from task" : "build-reference",
        "get root from argument" : "-fr",
        "remove input extension" : true,
        "additional text from parameters" : {
          "order" : [
            "filename root",
            "hash-size"
          ],
          "hash-size" : {
            "get parameter from task" : "build-jump-database",
            "get parameter from argument" : "-hs",
            "remove extension" : true
          }
        }
      }
    },
    "mark-duplicates" : {
      "--out" : {
        "filename root" : "from argument",
        "get root from task" : "mark-duplicates",
        "get root from argument" : "--in",
        "remove input extension" : true
      }
    }
  },
  "linkage" : {
    "build-jump-database" : {
      "-ia" : {
        "link to this task" : "build-reference",
        "link to this argument" : "-oa"
      }
    },
    "index-fasta" : {
      "--in" : {
        "link to this task" : "build-reference",
        "link to this argument" : "-fr"
      }
    },
    "align" : {
      "-in" : {
        "link to this task" : "build-read-archive",
        "link to this argument" : "-out"
      },
      "-ia" : {
        "link to this task" : "build-reference",
        "link to this argument" : "-oa"
      },
      "-j" : {
        "link to this task" : "build-jump-database",
        "link to this argument" : "-hs"
      },
      "-hs" : {
        "link to this task" : "build-jump-database",
        "link to this argument" : "-hs"
      }
    },
    "sort-primary-bam" : {
      "-in" : {
        "link to this task" : "align",
        "link to this argument" : "-out",
        "extension" : ".bam"
      }
    },
    "sort-multiple-bam" : {
      "-in" : {
        "link to this task" : "align",
        "link to this argument" : "-out",
        "extension" : ".multiple.bam"
      },
      "-out" : {
        "link to this task" : "align",
        "link to this argument" : "-out",
        "extension" : ".multiple.sorted.bam"
      }
    },
    "mark-duplicates" : {
      "--in" : {
        "link to this task" : "sort-primary-bam",
        "link to this argument" : "-out"
      }
    },
    "index-primary-bam" : {
      "-in" : {
        "link to this task" : "mark-duplicates",
        "link to this argument" : "--out"
      }
    },
    "variant-call" : {
      "--bam" : {
        "link to this task" : "mark-duplicates",
        "link to this argument" : "--out"
      },
      "--fasta-reference" : {
        "link to this task" : "build-reference",
        "link to this argument" : "-fr"
      }
    },
    "variant-call-duplicates" : {
      "--bam" : {
        "link to this task" : "mark-duplicates",
        "link to this argument" : "--out"
      },
      "--fasta-reference" : {
        "link to this task" : "build-reference",
        "link to this argument" : "-fr"
      }
    },
    "intersect" : {
      "--reference" : {
        "link to this task" : "build-reference",
        "link to this argument" : "-fr"
      },
      "--in" : {
        "link to this task" : "variant-call-duplicates",
        "link to this argument" : "--vcf"
      },
      "--intersect-vcf" : {
        "link to this task" : "variant-call",
        "link to this argument" : "--vcf"
      }
    },
    "unique-variants" : {
      "--reference" : {
        "link to this task" : "build-reference",
        "link to this argument" : "-fr"
      },
      "--intersect-vcf" : {
        "link to this task" : "intersect",
        "link to this argument" : "--intersect-vcf"
      },
      "--in" : {
        "link to this task" : "intersect",
        "link to this argument" : "--in"
      }
    }
  },
  "arguments" : {
    "--fasta" : {
      "description" : "The reference fasta genome.",
      "link to this task" : "build-reference",
      "link to this argument" : "-fr",
      "short form argument" : "-f",
      "type" : "string"
    },
    "--hash-size" : {
      "description" : "hash-size",
      "link to this task" : "build-jump-database",
      "link to this argument" : "-hs",
      "type" : "integer",
      "short form argument" : "-hs"
    },
    "--fastq" : {
      "short form argument" : "-q",
      "link to this task" : "build-read-archive",
      "link to this argument" : "-q",
      "description" : "The input fastq file (first mate)",
      "type" : "string",
      "user entry required" : "true"
    },
    "--fastq2" : {
      "short form argument" : "-q2",
      "link to this task" : "build-read-archive",
      "link to this argument" : "-q2",
      "description" : "The input fastq file (second mate)",
      "type" : "string",
      "user entry required" : "true"
    },
    "--median-fragment-length" : {
      "short form argument" : "-mfl",
      "link to this task" : "build-read-archive",
      "link to this argument" : "-mfl",
      "description" : "Median fragment length. e.g. 150",
      "type" : "integer"
    },
    "--sequencing-technology" : {
      "short form argument" : "-st",
      "description" : "Sequencing technology: '454', 'helicos', 'illumina', 'illumina_long', 'sanger' or 'solid'",
      "link to this task" : "build-read-archive",
      "link to this argument" : "-st",
      "type" : "string"
    },
    "--ann-se" : {
      "description" : "Neural network file for Mosaik mapping quality scores (single end).",
      "short form argument" : "-as",
      "link to this task" : "align",
      "link to this argument" : "-annse",
      "type" : "string"
    },
    "--ann-pe" : {
      "description" : "Neural network file for Mosaik mapping quality scores (paired end).",
      "short form argument" : "-ap",
      "link to this task" : "align",
      "link to this argument" : "-annpe",
      "type" : "string"
    },
    "--processors" : {
      "description" : "Number or threads for multithreaded tools.",
      "short form argument" : "-p",
      "link to this task" : "align",
      "link to this argument" : "-p",
      "type" : "string"
    },
    "--out" : {
      "description" : "The output read archive.",
      "link to this task" : "build-read-archive",
      "link to this argument" : "-out",
      "short form argument" : "-o",
      "type" : "string"
    },
    "--variants-out" : {
      "description" : "Variants called without duplicates.",
      "link to this task" : "variant-call",
      "link to this argument" : "--vcf",
      "short form argument" : "-vo",
      "type" : "string"
    },
    "--variants-out-dup" : {
      "description" : "Variants called with duplicates.",
      "link to this task" : "variant-call-duplicates",
      "link to this argument" : "--vcf",
      "short form argument" : "-vod",
      "type" : "string"
    },
    "--include-duplicates" : {
      "description" : "Should duplicates be included in variant calling.",
      "link to this task" : "variant-call-duplicates",
      "link to this argument" : "--use-duplicate-reads",
      "short form argument" : "-4",
      "type" : "flag"
    },
    "--invert-intersect" : {
      "description" : "Produce inverse of intersection.",
      "link to this task" : "unique-variants",
      "link to this argument" : "--invert",
      "short form argument" : "-ii",
      "type" : "flag"
    },
    "--intersect-out" : {
      "description" : "Output intersection file.",
      "link to this task" : "intersect",
      "link to this argument" : "--out",
      "short form argument" : "-io",
      "type" : "string"
    },
    "--unique-out" : {
      "description" : "Output unique intersection file.",
      "link to this task" : "unique-variants",
      "link to this argument" : "--out",
      "short form argument" : "-uo",
      "type" : "string"
    }
  },
  "delete files" : {
    "build-read-archive" : {
      "-out" : {
        "delete after task" : "align"
      }
    },
    "align" : {
      "-out" : {
        "output extension" : [
          ".bam",
          ".multiple.bam"
        ],
        "delete after task" : [
          "sort-primary-bam",
          "sort-multiple-bam"
        ]
      }
    }
  },

  "instances" : {
    "default" : {
      "description" : "The default instance requires the user to input all parameters and files.",
      "--hash-size" : "14",
      "--sequencing-technology" : "illumina",
      "--ann-se" : "$(RESOURCES)/tutorial/current/se.100.005.ann",
      "--ann-pe" : "$(RESOURCES)/tutorial/current/pe.100.01.ann",
      "--processors" : "8",
      "--include-duplicates" : "set",
      "--variants-out" : "$(PWD)/variants.vcf",
      "--variants-out-dup" : "$(PWD)/variants_dup.vcf",
      "--invert-intersect" : "set",
      "--intersect-out" : "intersection.vcf",
      "--unique-out" : "only-dups.vcf"
    }
  }
}
